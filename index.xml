<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TONGTWU</title>
    <link>/</link>
    <description>Recent content on TONGTWU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Sep 2021 02:24:35 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工厂方法模式</title>
      <link>/post/dpfactorymethod/</link>
      <pubDate>Sun, 19 Sep 2021 02:24:35 +0800</pubDate>
      
      <guid>/post/dpfactorymethod/</guid>
      <description>直接上demo
interface product{ void method(); } class ProductA{ void method(){ System.out.println(&amp;#34;ProductA.method....&amp;#34;); } } class ProductB{ void method(){ System.out.println(&amp;#34;ProductA.method....&amp;#34;); } } abstract class Aplication{ void createInstance(); public Product getInstance(){ // ... 其它处理  Product product = createInstance(); // ... 其它处理  return product; } } class ConcreteProductA implements Aplication{ @override void createInstance(){ return ProductA(); } } class ConcreteProductB implements Aplication{ @override void createInstance(){ return ProductB(); } } public class FactoryTest{ public static void main(String[] args){ Aplication app = new ConcreteProductA(); Product product = app.</description>
    </item>
    
    <item>
      <title>装饰器模式</title>
      <link>/post/dpddcorator/</link>
      <pubDate>Sun, 19 Sep 2021 01:43:39 +0800</pubDate>
      
      <guid>/post/dpddcorator/</guid>
      <description>&lt;p&gt;装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;目的： 在不改变原有对象的基础上，将功能附加到对象上。&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>/post/designpatterns/</link>
      <pubDate>Fri, 23 Jul 2021 23:12:00 +0800</pubDate>
      
      <guid>/post/designpatterns/</guid>
      <description>&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>/post/dp_singleton/</link>
      <pubDate>Fri, 23 Jul 2021 23:05:48 +0800</pubDate>
      
      <guid>/post/dp_singleton/</guid>
      <description>&lt;p&gt;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Git 常用命令</title>
      <link>/post/gitusage/</link>
      <pubDate>Wed, 21 Jul 2021 14:44:13 +0800</pubDate>
      
      <guid>/post/gitusage/</guid>
      <description>&lt;p&gt;Git 是开发中常用的工具之一，它是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 原本是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件，但是现在广泛使用在项目开发过程中实现版本管理，本文常用命令整理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>第一天，新的开始</title>
      <link>/post/thefirst/</link>
      <pubDate>Wed, 21 Jul 2021 12:43:30 +0800</pubDate>
      
      <guid>/post/thefirst/</guid>
      <description>&lt;p&gt;这是我开始写博客的第一天，也是我开始参加工作的第一个月。&lt;/p&gt;
&lt;p&gt;这也是一个从满怀憧憬走向现实的过程，参加了公司的入职培训和企业文化学习，这些是理想国，当然，我也认同。但是实际上对实质的工作内容并没有那么大的热情，做为一个学习了7年（本+硕）计算机专业的学生本来打算去创造世界，最终却在给“漏洞百出的世界”打杂，的确不免让人失望。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
