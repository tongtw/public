<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计模式 on TONGTWU</title>
    <link>/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 设计模式 on TONGTWU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 19 Sep 2021 02:24:35 +0800</lastBuildDate><atom:link href="/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>工厂方法模式</title>
      <link>/post/dpfactorymethod/</link>
      <pubDate>Sun, 19 Sep 2021 02:24:35 +0800</pubDate>
      
      <guid>/post/dpfactorymethod/</guid>
      <description>&lt;p&gt;工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。&lt;/p&gt;
&lt;p&gt;在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>装饰器模式</title>
      <link>/post/dpddcorator/</link>
      <pubDate>Sun, 19 Sep 2021 01:43:39 +0800</pubDate>
      
      <guid>/post/dpddcorator/</guid>
      <description>&lt;p&gt;装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;目的： 在不改变原有对象的基础上，将功能附加到对象上。&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>/post/designpatterns/</link>
      <pubDate>Fri, 23 Jul 2021 23:12:00 +0800</pubDate>
      
      <guid>/post/designpatterns/</guid>
      <description>&lt;p&gt;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>/post/dp_singleton/</link>
      <pubDate>Fri, 23 Jul 2021 23:05:48 +0800</pubDate>
      
      <guid>/post/dp_singleton/</guid>
      <description>&lt;p&gt;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
